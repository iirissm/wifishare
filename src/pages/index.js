import Head from "next/head";
import styles from "../styles/home.module.css";
import Header from "components/header";
import { useMoralis } from "react-moralis";
import { contractAddress_ganache } from "config2"
import { abi, contractAddress_local, contractAddress_mumbai } from "config"
import { useWeb3Contract } from "react-moralis"
import { useEffect, useState, useRef } from "react"
import { useNotification } from "@web3uikit/core"
import { ethers } from "ethers"

function isValidWifiprice(wifi_price) {
  if (wifi_price >= 0) {
    return true;
  }
  else {
    return false;
  }
}
function isValidshopid(shopid) {
  const ethereumAddressRegex = /^(0x)?[0-9a-fA-F]{40}$/;
  if (ethereumAddressRegex.test(shopid)) {
    return true;
  }
  else {
    return false;
  }
}
export default function home() {
  const { isWeb3Enabled, chainId } = useMoralis();
  const dispatch = useNotification()

  const [isLoading, setIsLoading] = useState(false);

  const [wifiPrice, setWifiPrice] = useState('');
  const [shopId, setShopId] = useState('');
  const [locationUpload, setLocationUpload] = useState('');
  const [wifiUpload, setWifiUpload] = useState('');

  const handleWifiPriceChange = (event) => {
    const value = event.target.value;
    setWifiPrice(value);
  };

  const handleShopIdChange = (event) => {
    const address = event.target.value;
    setShopId(address);
  };

  const handleLocationUploadChange = (event) => {
    setLocationUpload(event.target.value);
  };

  const handleWifiUploadChange = (event) => {
    setWifiUpload(event.target.value);
  };
  //暂时用钩子记录request
  const [requestID, setrequestID] = useState(0);
  const [price_download, setprice_download] = useState(0);
  const [location_download, setlocation_download] = useState('');
  const [time_download, settime_download] = useState('');
  const [isLoading_request, setisLoading_request] = useState(false);
  const [isLoading_paying, setisLoading_paying] = useState(false);
  const [isLoading_showrid, setisLoading_showrid] = useState(false);
  const [isLoading_showup, setisLoading_showup] = useState(false);
  const [isLoading_showdown, setisLoading_showdown] = useState(false);
  const [uploader_addr, setuploader_addr] = useState('');
  const [downloader_addr, setdownloader_addr] = useState('');

  const handleuploader_addr = (event) => {
    const value = event.target.value;
    setuploader_addr(value);
  };

  const handledownloader_addr = (event) => {
    const value = event.target.value;
    setdownloader_addr(value);
  };

  const handleprice_download = (event) => {
    const value = event.target.value;
    setprice_download(value);
  };


  const handlelocation_download = (event) => {
    const value = event.target.value;
    setlocation_download(value);
  };

  const handlerequestID = (event) => {
    const value = event.target.value;
    setrequestID(value);
  };
  const handletime_download = (event) => {
    const value = event.target.value;
    settime_download(value);
  };
  const handlewifiprice = () => {
    dispatch({
      type: "info",
      message: "wifi price cannot < 0",
      title: "wifi price Notification",
      position: "topR",
      icon: "bell",
    })
  }

  const handleaddress = () => {
    dispatch({
      type: "info",
      message: "check your shop address",
      title: "shop address Notification",
      position: "topR",
      icon: "bell",
    })
  }

  const handleNewNotification = () => {
    dispatch({
      type: "info",
      message: "Transaction Complete!",
      title: "Transaction Notification",
      position: "topR",
      icon: "bell",
    })
  }
  const [event_uploadAddr_Data, setEvent_uploadAddr_Data] = useState([]);
  const [event_downloadAddr_Data, setEvent_downloadAddr_Data] = useState([]);
  const [event_requestId_Data, setEvent_requestId_Data] = useState([]);
  
  
  return (

    <div className={styles.container}>
      <Head>
        <title>Wifishare App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      {isWeb3Enabled ? (<div className="flex flex-row">
        <div>
          <input type="number" value={wifiPrice} onChange={handleWifiPriceChange} placeholder="Enter your price" />
          <input type="text" value={shopId} onChange={handleShopIdChange} placeholder="Enter your shopId" />
          <input type="text" value={locationUpload} onChange={handleLocationUploadChange} placeholder="Enter your location" />
          <input type="text" value={wifiUpload} onChange={handleWifiUploadChange} placeholder="Enter your Wifi" />

          <button
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={async () => {
              if (isValidWifiprice(wifiPrice) && isValidshopid(shopId)) {

                let _wifiprice_up = wifiPrice;
                let _shopid_up = ethers.utils.getAddress(shopId);
                let _wifixinxi_up = wifiUpload;
                let _location_up = locationUpload;
                setIsLoading(true);
                const provider = new ethers.providers.Web3Provider(window.ethereum)
                const signer = provider.getSigner()
                const contract = new ethers.Contract(contractAddress_mumbai, abi, signer)

                try {
                  const val = await contract.Upload_Wifiprint(_wifixinxi_up,
                    _location_up,
                    _wifiprice_up,
                    _shopid_up)
                  /* optional - wait for transaction to be confirmed before rerouting */
                  /* await provider.waitForTransaction(val.hash) */

                  const results = await val.wait()

                  handleNewNotification()
                  try {
                    const events = results.events
                    console.log('events: ', events)
                    for (let i = 0; i < events.length; i++) {
                      const event = events[i];
                      if (event.event == "upload_wifiprint") {
                        // 提取参数
                        const sender = event.args[0];
                        const location = event.args[1];
                        const _price = event.args[2];
                        const timestamp = event.args[3];
                        console.log("sender:", sender);
                        console.log("location:", location);
                        console.log("_price:", _price);
                        console.log("timestamp:", timestamp);
                      }
                    }
                    setIsLoading(false);

                  }
                  catch (err) {
                    console.log(err)
                    setIsLoading(false);
                  }


                } catch (err) {
                  console.log('Error: ', err)
                  setIsLoading(false);
                }

              }
              else {
                if (!isValidWifiprice(wifiPrice)) {
                  handlewifiprice();
                  setIsLoading(false);
                }
                else {
                  handleaddress();
                  setIsLoading(false);
                }
              }
            }

            }
            disabled={isLoading}
          >
            {isLoading ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              "Upload"
            )}
          </button>
          <hr></hr>
          <input type="number" value={time_download} onChange={handletime_download} placeholder="time for download" />
          <input type="text" value={location_download} onChange={handlelocation_download} placeholder="location for download" />

          <button
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={async () => {
              if (isValidWifiprice(time_download)) {
                let _time_download = time_download
                let _location_download = location_download
                console.log(_time_download, _location_download)
                setisLoading_request(true);
                const provider2 = new ethers.providers.Web3Provider(window.ethereum)
                const signer2 = provider2.getSigner()
                const contract2 = new ethers.Contract(contractAddress_mumbai, abi, signer2)

                try {
                  const val = await contract2.request_wifiDownload(_location_download, _time_download)
                  const results = await val.wait()

                  handleNewNotification()
                  try {
                    const events = results.events
                    console.log('events: ', events)
                    let signer_address = await signer2.getAddress();
                    for (let i = 0; i < events.length; i++) {
                      const event = events[i];
                      if (event.event == "requestAdd") {
                        // 提取参数
                        const address = event.args[0];
                        const id = event.args[1];
                        const allPrice = event.args[2];
                        const count = event.args[3];
                        console.log("address:", address);
                        console.log("request_id:", id);
                        console.log("allprice:", allPrice);
                        console.log("count:", count);
                        setrequestID(id);
                        setprice_download(allPrice);


                      }
                    }

                    setisLoading_request(false);

                  }
                  catch (err) {
                    console.log(err)
                    setisLoading_request(false);
                  }


                } catch (err) {
                  console.log('Error: ', err)
                  setisLoading_request(false);

                }
              }
              else {
                setisLoading_request(false);
              }


            }

            }
            disabled={isLoading_request}
          >
            {isLoading_request ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              "Request"
            )}
          </button>
          <hr></hr>
          <input type="number" value={requestID} onChange={handlerequestID} placeholder="RequestId" />
          <input type="number" value={price_download} onChange={handleprice_download} placeholder="Price to pay" />
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={async () => {
              setisLoading_paying(true);
              const provider2 = new ethers.providers.Web3Provider(window.ethereum)
              const signer2 = provider2.getSigner()
              const contract2 = new ethers.Contract(contractAddress_mumbai, abi, signer2)
              try {
                const val = await contract2.PayDownload_byRequestId(requestID, { value: price_download })
                const results = await val.wait()
                try {
                  const events = results.events
                  console.log('events: ', events)

                  for (let i = 0; i < events.length; i++) {
                    const event = events[i];
                    if (event.event == "Download_Wifiprint") {

                      // 提取参数
                      const WifiPrint = event.args[0];
                      const location = event.args[1];
                      const timestamp = event.args[2];

                      console.log("WifiPrint:", WifiPrint);
                      console.log("location:", location);
                      console.log("timestamp:", timestamp);

                    }

                    if (event.event == "PaymentReleased") {

                      // 提取参数 _account, _shares[i]
                      const _account = event.args[0];
                      const _shares = event.args[1];

                      console.log("_account:", _account);
                      console.log("_shares:", _shares);


                    }
                  }

                  setisLoading_paying(false);

                }
                catch (err) {
                  console.log(err)
                  setisLoading_paying(false);
                }
                handleNewNotification()
              } catch (err) {
                console.log(err)
                setisLoading_paying(false);
              }


            }} disabled={isLoading_paying}
          >
            {isLoading_paying ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              " "
            )}
            pay for download
          </button>
          <hr></hr>
          <input type="number" value={requestID} onChange={handlerequestID} placeholder="Show your wifi by id" />
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={async () => {
              setisLoading_showrid(true);
              const provider2 = new ethers.providers.Web3Provider(window.ethereum)
              const signer2 = provider2.getSigner()
              const contract2 = new ethers.Contract(contractAddress_mumbai, abi, signer2)
              try {
                const val = await contract2.fetch_wifi_byRequestId(requestID)
                for (let i = 0; i < val.length; i++) {
                  let id = val[i].id
                  let Price = val[i].Price
                  let WifiPrint = val[i].WifiPrint
                  let location = val[i].location
                  let Shop = val[i].Shop
                  let uploader = val[i].uploader
                  let timestamp = val[i].timestamp
                  const newEvent = { id, Price, WifiPrint, location, Shop, uploader, timestamp };
                  setEvent_requestId_Data((prevData) => [...prevData, newEvent])
                }

                handleNewNotification()
                setisLoading_showrid(false);
              } catch (err) {
                console.log(err)
                setisLoading_showrid(false);
              }


            }} disabled={isLoading_showrid}
          >
            {isLoading_showrid ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              " "
            )}
            show wifi by requestId
          </button>
          <div>
            {event_requestId_Data.map((event, index) => (
              <div key={index}>
                <p>Wifi_id: {event.id.toString()}</p>
                <p>wifi_Price: {event.Price.toString()}</p>
                <p>WifiPrint: {event.WifiPrint.toString()}</p>
                <p>location: {event.location.toString()}</p>
                <p>ShopAddress: {event.Shop.toString()}</p>
                <p>uploaderAddress: {event.uploader.toString()}</p>
                <p>timestamp: {event.timestamp.toString()}</p>
              </div>
            ))

            }
            {event_requestId_Data.length > 0 && (
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
                onClick={() => setEvent_requestId_Data([])}
              >
                清空
              </button>
            )}
          </div>
          <hr></hr>
          <input type="text" value={uploader_addr} onChange={handleuploader_addr} placeholder="Show your wifi by uploaderaddress" />
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={async () => {
              setisLoading_showup(true);
              const provider2 = new ethers.providers.Web3Provider(window.ethereum)
              const signer2 = provider2.getSigner()
              const contract2 = new ethers.Contract(contractAddress_mumbai, abi, signer2)
              try {
                let _uploader_addr = ethers.utils.getAddress(uploader_addr);
                const val = await contract2.fetch_wifi_byUploaderAddr(_uploader_addr)
                // console.log(val)
                for (let i = 0; i < val.length; i++) {
                  let id = val[i].id
                  let Price = val[i].Price
                  let WifiPrint = val[i].WifiPrint
                  let location = val[i].location
                  let Shop = val[i].Shop
                  let uploader = val[i].uploader
                  let timestamp = val[i].timestamp
                  const newEvent = { id, Price, WifiPrint, location, Shop, uploader, timestamp };
                  setEvent_uploadAddr_Data((prevData) => [...prevData, newEvent])
                }

                handleNewNotification()
                setisLoading_showup(false);
              } catch (err) {
                console.log(err)
                setisLoading_showup(false);
              }


            }} disabled={isLoading_showup}
          >
            {isLoading_showup ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              " "
            )}
            show wifi by uploaderAddress
          </button>
          <div>
            {event_uploadAddr_Data.map((event, index) => (
              <div key={index}>
                <p>Wifi_id: {event.id.toString()}</p>
                <p>wifi_Price: {event.Price.toString()}</p>
                <p>WifiPrint: {event.WifiPrint.toString()}</p>
                <p>location: {event.location.toString()}</p>
                <p>ShopAddress: {event.Shop.toString()}</p>
                <p>uploaderAddress: {event.uploader.toString()}</p>
                <p>timestamp: {event.timestamp.toString()}</p>
              </div>
            ))

            }
            {event_uploadAddr_Data.length > 0 && (
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
                onClick={() => setEvent_uploadAddr_Data([])}
              >
                清空
              </button>
            )}
          </div>
          <hr></hr>
          <input type="text" value={downloader_addr} onChange={handledownloader_addr} placeholder="Show your wifi by adddress" />
          <button className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
            onClick={async () => {
              setisLoading_showdown(true);
              const provider2 = new ethers.providers.Web3Provider(window.ethereum)
              const signer2 = provider2.getSigner()
              const contract2 = new ethers.Contract(contractAddress_mumbai, abi, signer2)
              try {
                let _downloader_addr = ethers.utils.getAddress(downloader_addr);
                const val = await contract2.fetch_wifi_byDownloaderAddr(_downloader_addr)
                for (let i = 0; i < val.length; i++) {
                  let id = val[i].id
                  let Price = val[i].Price
                  let WifiPrint = val[i].WifiPrint
                  let location = val[i].location
                  let Shop = val[i].Shop
                  let uploader = val[i].uploader
                  let timestamp = val[i].timestamp
                  const newEvent = { id, Price, WifiPrint, location, Shop, uploader, timestamp };
                  setEvent_downloadAddr_Data((prevData) => [...prevData, newEvent])
                }

                handleNewNotification()
                setisLoading_showdown(false);
              } catch (err) {
                console.log(err)
                setisLoading_showdown(false);
              }


            }} disabled={isLoading_showdown}
          >
            {isLoading_showdown ? (
              <div className="animate-spin spinner-border h-8 w-8 border-b-2 rounded-full"></div>
            ) : (
              " "
            )}
            show wifi by downloaderAddress
          </button>
          <div>
            {event_downloadAddr_Data.map((event, index) => (
              <div key={index}>
                <p>Wifi_id: {event.id.toString()}</p>
                <p>wifi_Price: {event.Price.toString()}</p>
                <p>WifiPrint: {event.WifiPrint.toString()}</p>
                <p>location: {event.location.toString()}</p>
                <p>ShopAddress: {event.Shop.toString()}</p>
                <p>uploaderAddress: {event.uploader.toString()}</p>
                <p>timestamp: {event.timestamp.toString()}</p>
              </div>
            ))

            }
            {event_downloadAddr_Data.length > 0 && (
              <button
                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto"
                onClick={() => setEvent_downloadAddr_Data([])}
              >
                清空
              </button>
            )}
          </div>
        </div>
      </div>

      ) : (
        <div>Please connect to a Wallet</div>
      )}
    </div>
  );
}